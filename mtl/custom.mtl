const int = i32;

const a: int = 124;

fn main() void {
    const b = a;
    const c = b;
    const d = c;
    // // comptime int
    const acip0 = 12 + 3;
    const acip1 = 12 + 3;
    const acip3 = acip0 + 3;
    const acip4 = 12 + acip1;
    const acip5 = acip3 + acip4;
    const acim0 = 12 - 3;
    const acim1 = 12 - 3;
    const acim3 = acim0 - 3;
    const acim4 = 12 - acim1;
    const acim5 = acim3 - acim4;
    const acis0 = 12 * 3;
    const acis1 = 12 * 3;
    const acis3 = acis0 * 3;
    const acis4 = 12 * acis1;
    const acis5 = acis3 * acis4;
    const acid0 = 12 / 3;
    const acid1 = 12 / 3;
    const acid3 = acid0 / 3;
    const acid4 = 12 / acid1;
    const acid5 = acid3 / acid4;
    // comptime float
    const acfp0 = 12.12 + 3.12;
    const acfp1 = 12.12 + 3.12;
    const acfp3 = acfp0 + 3.12;
    const acfp4 = 12.12 + acfp1;
    const acfp5 = acfp3 + acfp4;
    const acfm0 = 12.12 - 3.12;
    const acfm1 = 12.12 - 3.12;
    const acfm3 = acfm0 - 3.12;
    const acfm4 = 12.12 - acfm1;
    const acfm5 = acfm3 - acfm4;
    const acfs0 = 12.12 * 3.12;
    const acfs1 = 12.12 * 3.12;
    const acfs3 = acfs0 * 3.12;
    const acfs4 = 12.12 * acfs1;
    const acfs5 = acfs3 * acfs4;
    const acfd0 = 12.12 / 3.12;
    const acfd1 = 12.12 / 3.12;
    const acfd3 = acfd0 / 3.12;
    const acfd4 = 12.12 / acfd1;
    const acfd5 = acfd3 / acfd4;
    // i8
    const ai8p0: i8 = 12 + 3;
    const ai8p1: i8 = 12 + 3;
    const ai8p3: i8 = ai8p0 + 3;
    const ai8p4: i8 = 12 + ai8p1;
    const ai8p5: i8 = ai8p3 + ai8p4;
    const ai8m0: i8 = 12 - 3;
    const ai8m1: i8 = 12 - 3;
    const ai8m3: i8 = ai8m0 - 3;
    const ai8m4: i8 = 12 - ai8m1;
    const ai8m5: i8 = ai8m3 - ai8m4;
    const ai8s0: i8 = 12 * 3;
    const ai8s1: i8 = 12 * 3;
    const ai8s3: i8 = ai8s0 * 3;
    const ai8s4: i8 = 12 * ai8s1;
    const ai8s5: i8 = ai8s3 * ai8s4;
    const ai8d0: i8 = 12 / 3;
    const ai8d1: i8 = 12 / 3;
    const ai8d3: i8 = ai8d0 / 3;
    const ai8d4: i8 = 12 / ai8d1;
    const ai8d5: i8 = ai8d3 / ai8d4;
    // i16
    const ai16p0: i16 = 12 + 3;
    const ai16p1: i16 = 12 + 3;
    const ai16p3: i16 = ai16p0 + 3;
    const ai16p4: i16 = 12 + ai16p1;
    const ai16p5: i16 = ai16p3 + ai16p4;
    const ai16m0: i16 = 12 - 3;
    const ai16m1: i16 = 12 - 3;
    const ai16m3: i16 = ai16m0 - 3;
    const ai16m4: i16 = 12 - ai16m1;
    const ai16m5: i16 = ai16m3 - ai16m4;
    const ai16s0: i16 = 12 * 3;
    const ai16s1: i16 = 12 * 3;
    const ai16s3: i16 = ai16s0 * 3;
    const ai16s4: i16 = 12 * ai16s1;
    const ai16s5: i16 = ai16s3 * ai16s4;
    const ai16d0: i16 = 12 / 3;
    const ai16d1: i16 = 12 / 3;
    const ai16d3: i16 = ai16d0 / 3;
    const ai16d4: i16 = 12 / ai16d1;
    const ai16d5: i16 = ai16d3 / ai16d4;
    // i32
    const ai32p0: i32 = 12 + 3;
    const ai32p1: i32 = 12 + 3;
    const ai32p3: i32 = ai32p0 + 3;
    const ai32p4: i32 = 12 + ai32p1;
    const ai32p5: i32 = ai32p3 + ai32p4;
    const ai32m0: i32 = 12 - 3;
    const ai32m1: i32 = 12 - 3;
    const ai32m3: i32 = ai32m0 - 3;
    const ai32m4: i32 = 12 - ai32m1;
    const ai32m5: i32 = ai32m3 - ai32m4;
    const ai32s0: i32 = 12 * 3;
    const ai32s1: i32 = 12 * 3;
    const ai32s3: i32 = ai32s0 * 3;
    const ai32s4: i32 = 12 * ai32s1;
    const ai32s5: i32 = ai32s3 * ai32s4;
    const ai32d0: i32 = 12 / 3;
    const ai32d1: i32 = 12 / 3;
    const ai32d3: i32 = ai32d0 / 3;
    const ai32d4: i32 = 12 / ai32d1;
    const ai32d5: i32 = ai32d3 / ai32d4;
    // i64
    const ai64p0: i64 = 12 + 3;
    const ai64p1: i64 = 12 + 3;
    const ai64p3: i64 = ai64p0 + 3;
    const ai64p4: i64 = 12 + ai64p1;
    const ai64p5: i64 = ai64p3 + ai64p4;
    const ai64m0: i64 = 12 - 3;
    const ai64m1: i64 = 12 - 3;
    const ai64m3: i64 = ai64m0 - 3;
    const ai64m4: i64 = 12 - ai64m1;
    const ai64m5: i64 = ai64m3 - ai64m4;
    const ai64s0: i64 = 12 * 3;
    const ai64s1: i64 = 12 * 3;
    const ai64s3: i64 = ai64s0 * 3;
    const ai64s4: i64 = 12 * ai64s1;
    const ai64s5: i64 = ai64s3 * ai64s4;
    const ai64d0: i64 = 12 / 3;
    const ai64d1: i64 = 12 / 3;
    const ai64d3: i64 = ai64d0 / 3;
    const ai64d4: i64 = 12 / ai64d1;
    const ai64d5: i64 = ai64d3 / ai64d4;
    // i128
    const ai128p0: i128 = 12 + 3;
    const ai128p1: i128 = 12 + 3;
    const ai128p3: i128 = ai128p0 + 3;
    const ai128p4: i128 = 12 + ai128p1;
    const ai128p5: i128 = ai128p3 + ai128p4;
    const ai128m0: i128 = 12 - 3;
    const ai128m1: i128 = 12 - 3;
    const ai128m3: i128 = ai128m0 - 3;
    const ai128m4: i128 = 12 - ai128m1;
    const ai128m5: i128 = ai128m3 - ai128m4;
    const ai128s0: i128 = 12 * 3;
    const ai128s1: i128 = 12 * 3;
    const ai128s3: i128 = ai128s0 * 3;
    const ai128s4: i128 = 12 * ai128s1;
    const ai128s5: i128 = ai128s3 * ai128s4;
    const ai128d0: i128 = 12 / 3;
    const ai128d1: i128 = 12 / 3;
    const ai128d3: i128 = ai128d0 / 3;
    const ai128d4: i128 = 12 / ai128d1;
    const ai128d5: i128 = ai128d3 / ai128d4;
    // u8
    const au8p0: u8 = 12 + 3;
    const au8p1: u8 = 12 + 3;
    const au8p3: u8 = au8p0 + 3;
    const au8p4: u8 = 12 + au8p1;
    const au8p5: u8 = au8p3 + au8p4;
    const au8m0: u8 = 12 - 3;
    const au8m1: u8 = 12 - 3;
    const au8m3: u8 = au8m0 - 3;
    const au8m4: u8 = 12 - au8m1;
    const au8m5: u8 = au8m3 - au8m4;
    const au8s0: u8 = 12 * 3;
    const au8s1: u8 = 12 * 3;
    const au8s3: u8 = au8s0 * 3;
    const au8s4: u8 = 12 * au8s1;
    const au8s5: u8 = au8s3 * au8s4;
    const au8d0: u8 = 12 / 3;
    const au8d1: u8 = 12 / 3;
    const au8d3: u8 = au8d0 / 3;
    const au8d4: u8 = 12 / au8d1;
    const au8d5: u8 = au8d3 / au8d4;
    // u16
    const au16p0: u16 = 12 + 3;
    const au16p1: u16 = 12 + 3;
    const au16p3: u16 = au16p0 + 3;
    const au16p4: u16 = 12 + au16p1;
    const au16p5: u16 = au16p3 + au16p4;
    const au16m0: u16 = 12 - 3;
    const au16m1: u16 = 12 - 3;
    const au16m3: u16 = au16m0 - 3;
    const au16m4: u16 = 12 - au16m1;
    const au16m5: u16 = au16m3 - au16m4;
    const au16s0: u16 = 12 * 3;
    const au16s1: u16 = 12 * 3;
    const au16s3: u16 = au16s0 * 3;
    const au16s4: u16 = 12 * au16s1;
    const au16s5: u16 = au16s3 * au16s4;
    const au16d0: u16 = 12 / 3;
    const au16d1: u16 = 12 / 3;
    const au16d3: u16 = au16d0 / 3;
    const au16d4: u16 = 12 / au16d1;
    const au16d5: u16 = au16d3 / au16d4;
    // u32
    const au32p0: u32 = 12 + 3;
    const au32p1: u32 = 12 + 3;
    const au32p3: u32 = au32p0 + 3;
    const au32p4: u32 = 12 + au32p1;
    const au32p5: u32 = au32p3 + au32p4;
    const au32m0: u32 = 12 - 3;
    const au32m1: u32 = 12 - 3;
    const au32m3: u32 = au32m0 - 3;
    const au32m4: u32 = 12 - au32m1;
    const au32m5: u32 = au32m3 - au32m4;
    const au32s0: u32 = 12 * 3;
    const au32s1: u32 = 12 * 3;
    const au32s3: u32 = au32s0 * 3;
    const au32s4: u32 = 12 * au32s1;
    const au32s5: u32 = au32s3 * au32s4;
    const au32d0: u32 = 12 / 3;
    const au32d1: u32 = 12 / 3;
    const au32d3: u32 = au32d0 / 3;
    const au32d4: u32 = 12 / au32d1;
    const au32d5: u32 = au32d3 / au32d4;
    // u64
    const au64p0: u64 = 12 + 3;
    const au64p1: u64 = 12 + 3;
    const au64p3: u64 = au64p0 + 3;
    const au64p4: u64 = 12 + au64p1;
    const au64p5: u64 = au64p3 + au64p4;
    const au64m0: u64 = 12 - 3;
    const au64m1: u64 = 12 - 3;
    const au64m3: u64 = au64m0 - 3;
    const au64m4: u64 = 12 - au64m1;
    const au64m5: u64 = au64m3 - au64m4;
    const au64s0: u64 = 12 * 3;
    const au64s1: u64 = 12 * 3;
    const au64s3: u64 = au64s0 * 3;
    const au64s4: u64 = 12 * au64s1;
    const au64s5: u64 = au64s3 * au64s4;
    const au64d0: u64 = 12 / 3;
    const au64d1: u64 = 12 / 3;
    const au64d3: u64 = au64d0 / 3;
    const au64d4: u64 = 12 / au64d1;
    const au64d5: u64 = au64d3 / au64d4;
    // u128
    const au128p0: u128 = 12 + 3;
    const au128p1: u128 = 12 + 3;
    const au128p3: u128 = au128p0 + 3;
    const au128p4: u128 = 12 + au128p1;
    const au128p5: u128 = au128p3 + au128p4;
    const au128m0: u128 = 12 - 3;
    const au128m1: u128 = 12 - 3;
    const au128m3: u128 = au128m0 - 3;
    const au128m4: u128 = 12 - au128m1;
    const au128m5: u128 = au128m3 - au128m4;
    const au128s0: u128 = 12 * 3;
    const au128s1: u128 = 12 * 3;
    const au128s3: u128 = au128s0 * 3;
    const au128s4: u128 = 12 * au128s1;
    const au128s5: u128 = au128s3 * au128s4;
    const au128d0: u128 = 12 / 3;
    const au128d1: u128 = 12 / 3;
    const au128d3: u128 = au128d0 / 3;
    const au128d4: u128 = 12 / au128d1;
    const au128d5: u128 = au128d3 / au128d4;
    // f16
    const af16p0: f16 = 12.12 + 3.12;
    const af16p1: f16 = 12.12 + 3.12;
    const af16p3: f16 = af16p0 + 3.12;
    const af16p4: f16 = 12.12 + af16p1;
    const af16p5: f16 = af16p3 + af16p4;
    const af16m0: f16 = 12.12 - 3.12;
    const af16m1: f16 = 12.12 - 3.12;
    const af16m3: f16 = af16m0 - 3.12;
    const af16m4: f16 = 12.12 - af16m1;
    const af16m5: f16 = af16m3 - af16m4;
    const af16s0: f16 = 12.12 * 3.12;
    const af16s1: f16 = 12.12 * 3.12;
    const af16s3: f16 = af16s0 * 3.12;
    const af16s4: f16 = 12.12 * af16s1;
    const af16s5: f16 = af16s3 * af16s4;
    const af16d0: f16 = 12.12 / 3.12;
    const af16d1: f16 = 12.12 / 3.12;
    const af16d3: f16 = af16d0 / 3.12;
    const af16d4: f16 = 12.12 / af16d1;
    const af16d5: f16 = af16d3 / af16d4;
    // f32
    const af32p0: f32 = 12.12 + 3.12;
    const af32p1: f32 = 12.12 + 3.12;
    const af32p3: f32 = af32p0 + 3.12;
    const af32p4: f32 = 12.12 + af32p1;
    const af32p5: f32 = af32p3 + af32p4;
    const af32m0: f32 = 12.12 - 3.12;
    const af32m1: f32 = 12.12 - 3.12;
    const af32m3: f32 = af32m0 - 3.12;
    const af32m4: f32 = 12.12 - af32m1;
    const af32m5: f32 = af32m3 - af32m4;
    const af32s0: f32 = 12.12 * 3.12;
    const af32s1: f32 = 12.12 * 3.12;
    const af32s3: f32 = af32s0 * 3.12;
    const af32s4: f32 = 12.12 * af32s1;
    const af32s5: f32 = af32s3 * af32s4;
    const af32d0: f32 = 12.12 / 3.12;
    const af32d1: f32 = 12.12 / 3.12;
    const af32d3: f32 = af32d0 / 3.12;
    const af32d4: f32 = 12.12 / af32d1;
    const af32d5: f32 = af32d3 / af32d4;
    // f64
    const af64p0: f64 = 12.12 + 3.12;
    const af64p1: f64 = 12.12 + 3.12;
    const af64p3: f64 = af64p0 + 3.12;
    const af64p4: f64 = 12.12 + af64p1;
    const af64p5: f64 = af64p3 + af64p4;
    const af64m0: f64 = 12.12 - 3.12;
    const af64m1: f64 = 12.12 - 3.12;
    const af64m3: f64 = af64m0 - 3.12;
    const af64m4: f64 = 12.12 - af64m1;
    const af64m5: f64 = af64m3 - af64m4;
    const af64s0: f64 = 12.12 * 3.12;
    const af64s1: f64 = 12.12 * 3.12;
    const af64s3: f64 = af64s0 * 3.12;
    const af64s4: f64 = 12.12 * af64s1;
    const af64s5: f64 = af64s3 * af64s4;
    const af64d0: f64 = 12.12 / 3.12;
    const af64d1: f64 = 12.12 / 3.12;
    const af64d3: f64 = af64d0 / 3.12;
    const af64d4: f64 = 12.12 / af64d1;
    const af64d5: f64 = af64d3 / af64d4;
    // f80
    const af80p0: f80 = 12.12 + 3.12;
    const af80p1: f80 = 12.12 + 3.12;
    const af80p3: f80 = af80p0 + 3.12;
    const af80p4: f80 = 12.12 + af80p1;
    const af80p5: f80 = af80p3 + af80p4;
    const af80m0: f80 = 12.12 - 3.12;
    const af80m1: f80 = 12.12 - 3.12;
    const af80m3: f80 = af80m0 - 3.12;
    const af80m4: f80 = 12.12 - af80m1;
    const af80m5: f80 = af80m3 - af80m4;
    const af80s0: f80 = 12.12 * 3.12;
    const af80s1: f80 = 12.12 * 3.12;
    const af80s3: f80 = af80s0 * 3.12;
    const af80s4: f80 = 12.12 * af80s1;
    const af80s5: f80 = af80s3 * af80s4;
    const af80d0: f80 = 12.12 / 3.12;
    const af80d1: f80 = 12.12 / 3.12;
    const af80d3: f80 = af80d0 / 3.12;
    const af80d4: f80 = 12.12 / af80d1;
    const af80d5: f80 = af80d3 / af80d4;
    // f128
    const af128p0: f128 = 12.12 + 3.12;
    const af128p1: f128 = 12.12 + 3.12;
    const af128p3: f128 = af128p0 + 3.12;
    const af128p4: f128 = 12.12 + af128p1;
    const af128p5: f128 = af128p3 + af128p4;
    const af128m0: f128 = 12.12 - 3.12;
    const af128m1: f128 = 12.12 - 3.12;
    const af128m3: f128 = af128m0 - 3.12;
    const af128m4: f128 = 12.12 - af128m1;
    const af128m5: f128 = af128m3 - af128m4;
    const af128s0: f128 = 12.12 * 3.12;
    const af128s1: f128 = 12.12 * 3.12;
    const af128s3: f128 = af128s0 * 3.12;
    const af128s4: f128 = 12.12 * af128s1;
    const af128s5: f128 = af128s3 * af128s4;
    const af128d0: f128 = 12.12 / 3.12;
    const af128d1: f128 = 12.12 / 3.12;
    const af128d3: f128 = af128d0 / 3.12;
    const af128d4: f128 = 12.12 / af128d1;
    const af128d5: f128 = af128d3 / af128d4;

    // comptime
    const a0 = -12;
    const b0 = -a0;
    const c0 = -12.12;
    const d0 = -c0;
    // int
    const a1: i8 = -12;
    const b1: i8 = -a1;
    const c1: i16 = -12;
    const d1: i16 = -c1;
    const e1: i32 = -12;
    const f1: i32 = -e1;
    const g1: i64 = -12;
    const i1: i64 = -g1;
    const j1: i128 = -12;
    const k1: i128 = -j1;
    // unsigned int
    const a2: i8 = -12;
    const b2: i8 = -a2;
    const c2: i16 = -12;
    const d2: i16 = -c2;
    const e2: i32 = -12;
    const f2: i32 = -e2;
    const g2: i64 = -12;
    const i2: i64 = -g2;
    const j2: i128 = -12;
    const k2: i128 = -j2;
    // float
    const c3: f16 = -12;
    const d3: f16 = -c3;
    const e3: f32 = -12;
    const f3: f32 = -e3;
    const g3: f64 = -12;
    const i3: f64 = -g3;
    const j3: f80 = -12;
    const k3: f80 = -j3;
    const l3: f128 = -12;
    const m3: f128 = -l3;

    var _a := 1 + 1;
    var _b := _a + - 1;
    var _c := 123 / _b ;
    var _d := _c * 123;
    var _e := (1 + 2) * 3;
    var _f := 1 + 2 * 3;
    var _g := (1 + 2) * (3 - 4);
    var _h := -1 + 2;
    var _i := -(-1);
    var _k := 1 + 2 + 3 + 4;
    var _l := 1 * 2 / 3 * 4;
    var _m := 1 + -2 * -(3 + 4);


    const _a0 = 123 ;
    const _b0 = _a0;
    const _c0: i32 = 123;
    var _d0: i32 = 21;
    var _e0 := _c0;
    var _f0: i32 = _e0;
    var _g0 := 123;


    {
        var n := 1 + -2 * -(3 + 4);

        {}
    }
    {
        var n := 2; 
    }
    {
        var n := 2; 
    }
    {
        var n: i32 = 2;
    }
    const aaa = 1;

    dfn7();
}

fn dfn1() void {}

fn dfn2() u32 {
    return 1;
}

fn dfn3() u32 {
    return dfn2() + 1;
}

fn dfn4(fua: u32, fub: u32) u32 {
    return fua + fub;
}

fn dfn5(fua: u32, fub: u32) u32 {
    return dfn6(fua) + fub;
}

fn dfn6(fua: u32) T {
    return fua + 1;
}

fn dfn7() void {
    dfn1();
    const fua = dfn2();
    const fub = dfn3();
    const fuc = dfn4(1, 2);
    const fuv1 = 21;
    const fuv2 = 12;
    const fud = dfn4(fuv1, fuv2);
    const fue = dfn5(1, 2);
    const fuf = dfn5(fuv1, fuv2);
    const fug = dfn6(1);
    const fuh = dfn6(fuv2);
    dfn8();
} 

fn dfn8() void {}

